Q1: 
When class D inherits from class B, 
D’s constructor will run first, then B’s constructor.
D’s default constructor will be called. If you want to called D’s constructor will argument, you have to use initialization list.
Example



class D
{
	public:
	D()
	{
	cout<<"D default constructor \n"
	}
	
	D(int a)
	{
	cout<<"D constructor with "<<a<<"  \n";
	}
};

class B
{
	public :
	B()
	{
	cout<<"B default constructor \n"
	}
	
	B(int m)
	{
	cout<<"B constructor with "<<a<<"  \n";
	}
	
	B(int a,int b):D(a)
	{
	cout<<"B constructor with "<<a<<" and "<<b<<" \n";
	}
}

int main()
{
	B b;
	B bb(1);
	B bbb(2,3);
}

output 
D default constructor 
B default constructor 
D default constructor 
B constructor with 1
D constructor with 2
B constructor with 2 and 3


Question 2
Diamond problem happen when class B and class C inherit from class A, and class D inherit from class B, class C.
Then D called a method in A which B and C have overriden it differently.
To resolve it, we change class B and class C virtual inherit class A.

Question 3
when the exception is throw, p will not be deleted, which cause memory leak.

We can use vector<int> instead of pointer int* to make it safer

void test(int n)
{
vector <int>p;
p.resize(n);

for (int i=0;i<n;++i)
{
	p[i] = calElement(i);
	//
	
	//
	if (p[i]==0)
	throw "Exception element i got zero";
}


}




Question 4 
chep cai report 1 trang vao :))

question 5
Part A:
B default cstr
B copy cstr
Part B
B cstr with 2
D cstr with 2 args
B default cstr
B::doTest
D::doTest
B dest
D dest 
B dest 
Finished
B dest
B dest















